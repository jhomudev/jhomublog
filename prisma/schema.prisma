// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId @unique @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String      @unique
  emailVerified   DateTime?   @map("email_verified")
  image           String?
  username        String      @unique @default(uuid())
  password        String?
  account         Account?
  sessions        Session[]
  posts           Post[]
  comments        Comment[]
  bookmarks       Bookmark[]
  likes           Like[]
  followers       Follows[]    @relation("following")
  following       Follows[]    @relation("followers")
  createdAt       DateTime     @default(now()) @map("created_at")

  @@map("users")
}

model Follows {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  follower     User       @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId   String     @map("follower_id") @db.ObjectId
  following    User       @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId  String     @map("following_id") @db.ObjectId
  createdAt    DateTime   @default(now()) @map("created_at")

  @@map("follows")
  @@unique([followerId, followingId])
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String  @unique
  slug  String  @unique
  img   String?
  posts Post[]

  @@map("categories")
}
model Post {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  slug      String      @unique
  title     String      @unique
  overview  String
  content   String
  img       String?
  views     Int         @default(0)
  tags      String[]
  catId     String      @map("cat_id") @db.ObjectId
  cat       Category    @relation(fields: [catId], references: [id])
  userId    String      @map("user_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  bookmarks Bookmark[]
  likes     Like[]
  createdAt DateTime    @map("created_at")  @default(now())
  updatedAt DateTime    @map("update_at")  @default(now()) @updatedAt

  @@map("posts")
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  userId    String    @map("user_id") @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String    @map("post_id") @db.ObjectId
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @map("created_at")  @default(now())

  @@map("comments")
  @@unique([userId, postId])
}

model Bookmark {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @map("user_id") @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String    @map("post_id") @db.ObjectId
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @map("created_at")  @default(now())

  @@map("bookmarks")
  @@unique([userId, postId])
}

model Like {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @map("user_id") @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String    @map("post_id") @db.ObjectId
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @map("created_at") @default(now())

  @@map("likes")
  @@unique([userId, postId])
}